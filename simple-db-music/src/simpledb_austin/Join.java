package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
	
	private JoinPredicate p;
	private DbIterator child1;
	private DbIterator child2;
	private TupleDesc td1;
	private TupleDesc td2;
	private ArrayList<Tuple> childTups = new ArrayList<Tuple>();
	private Iterator<Tuple> it;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	this.td1 = child1.getTupleDesc();
    	this.td2 = child2.getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return td1.getFieldName(this.p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return td2.getFieldName(this.p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(this.td1, this.td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	this.child1.open();
    	this.child2.open();
    	while (child1.hasNext()) {
    		Tuple nextTuple1 = child1.next();
    		while (child2.hasNext()) {
        		Tuple nextTuple2 = child2.next();
        		if (this.p.filter(nextTuple1, nextTuple2)) {
        			Tuple joinTuple = new Tuple(this.getTupleDesc());
        			for (int i=0; i < this.td1.numFields(); i++) {
        	    		joinTuple.setField(i, nextTuple1.getField(i));
        	    	}
        	    	for (int j=0; j < this.td2.numFields(); j++) {
        	    		joinTuple.setField(td1.numFields()+j, nextTuple2.getField(j));
        	    	}
        	    	childTups.add(joinTuple);
        		}
    		}
    		child2.rewind();
    	}
        it = childTups.iterator();
        super.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	it = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	it = childTups.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if (it != null && it.hasNext()) {
            return it.next();
        } else
            return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	return new DbIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
    	this.child2 = children[1];
    }

}
