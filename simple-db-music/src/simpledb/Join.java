package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private DbIterator leftChild;
    private DbIterator rightChild;
    private JoinPredicate predicate;
    private TupleDesc tupleDesc;
    private final List<Tuple> joinedTups;
    private Iterator<Tuple> it;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.leftChild = child1;
        this.rightChild = child2;
        this.predicate = p;
        this.joinedTups = new ArrayList<Tuple>();
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return leftChild.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return rightChild.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        if (tupleDesc == null) {
            tupleDesc = TupleDesc.merge(leftChild.getTupleDesc(), rightChild.getTupleDesc());
        }
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        leftChild.open();
        rightChild.open();
        joinTups();
        leftChild.close();
        rightChild.close();
        super.open();
    }

    private void joinTups() throws DbException, TransactionAbortedException {
        Tuple left, right, joined;
        joinedTups.clear();
        int numLeftFields = leftChild.getTupleDesc().numFields();
        int numRightFields = rightChild.getTupleDesc().numFields();
        while (leftChild.hasNext()) {
            left = leftChild.next();
            rightChild.rewind();
            while (rightChild.hasNext()) {
                right = rightChild.next();
                if (predicate.filter(left, right)) {
                    joined = new Tuple(getTupleDesc());
                    for (int i = 0; i < numLeftFields; i++) {
                        joined.setField(i, left.getField(i));
                    }
                    for (int j = 0; j < numRightFields; j++) {
                        joined.setField(j + numLeftFields, right.getField(j));
                    }
                    joinedTups.add(joined);
                }
            }
        }
        it = joinedTups.iterator();
    }
    
    public void close() {
        super.close();
        it = null;
        // Don't need to close leftChild and rightChild because already closed them in open()
    }

    public void rewind() throws DbException, TransactionAbortedException {
        if (it == null) {
            throw new TransactionAbortedException();
        }
        it = joinedTups.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (it != null && it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{leftChild, rightChild};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.leftChild = children[0];
        this.rightChild = children[1];
        this.tupleDesc = null;
    }

}
